package cdn.domain;

import cn.hutool.core.date.DateUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.mudxx.cloud.gcore.model.response.GcoreCdnStatSeriesResourceResponse;

import java.util.Map;

/**
 * @author laiw
 * @date 2023/11/28 10:49
 */
public class TestJson {

    public static void main(String[] args) {

//        String s = "{\"resource\":{\"294320\":{\"metrics\":{\"requests\":[[1701136800,0],[1701137100,0],[1701137400,763],[1701137700,28],[1701138000,0],[1701138300,1520]]}}}}";

//        String s = "{\"resource\":{\"294320\":{\"metrics\":{\"upstream_bytes\":[[1701127800,0],[1701128100,0],[1701128400,0],[1701128700,0],[1701129000,0],[1701129300,0],[1701129600,0],[1701129900,0],[1701130200,0],[1701130500,0],[1701130800,0],[1701131100,0],[1701131400,0],[1701131700,0],[1701132000,0],[1701132300,0],[1701132600,0],[1701132900,0],[1701133200,0],[1701133500,0],[1701133800,0],[1701134100,0],[1701134400,0],[1701134700,0],[1701135000,0],[1701135300,9553],[1701135600,0],[1701135900,0],[1701136200,0],[1701136500,0],[1701136800,0],[1701137100,0],[1701137400,84048398],[1701137700,0],[1701138000,0],[1701138300,0],[1701138600,688951],[1701138900,0],[1701139200,0],[1701139500,0],[1701139800,0],[1701140100,0],[1701140400,0],[1701140700,0],[1701141000,0],[1701141300,0],[1701141600,0],[1701141900,0],[1701142200,0]],\"shield_bytes\":[[1701127800,0],[1701128100,0],[1701128400,0],[1701128700,0],[1701129000,0],[1701129300,0],[1701129600,0],[1701129900,0],[1701130200,0],[1701130500,0],[1701130800,0],[1701131100,0],[1701131400,0],[1701131700,0],[1701132000,0],[1701132300,0],[1701132600,0],[1701132900,0],[1701133200,0],[1701133500,0],[1701133800,0],[1701134100,0],[1701134400,0],[1701134700,0],[1701135000,0],[1701135300,0],[1701135600,0],[1701135900,0],[1701136200,0],[1701136500,0],[1701136800,0],[1701137100,0],[1701137400,0],[1701137700,0],[1701138000,0],[1701138300,0],[1701138600,0],[1701138900,0],[1701139200,0],[1701139500,0],[1701139800,0],[1701140100,0],[1701140400,0],[1701140700,0],[1701141000,0],[1701141300,0],[1701141600,0],[1701141900,0],[1701142200,0]],\"total_bytes\":[[1701127800,0],[1701128100,0],[1701128400,0],[1701128700,0],[1701129000,0],[1701129300,0],[1701129600,0],[1701129900,0],[1701130200,0],[1701130500,0],[1701130800,0],[1701131100,0],[1701131400,0],[1701131700,0],[1701132000,0],[1701132300,0],[1701132600,0],[1701132900,0],[1701133200,0],[1701133500,0],[1701133800,0],[1701134100,0],[1701134400,0],[1701134700,0],[1701135000,0],[1701135300,12192],[1701135600,0],[1701135900,0],[1701136200,0],[1701136500,0],[1701136800,0],[1701137100,0],[1701137400,84595557],[1701137700,694052],[1701138000,0],[1701138300,521498],[1701138600,692373],[1701138900,0],[1701139200,0],[1701139500,0],[1701139800,0],[1701140100,0],[1701140400,0],[1701140700,0],[1701141000,0],[1701141300,0],[1701141600,0],[1701141900,0],[1701142200,0]],\"cdn_bytes\":[[1701127800,0],[1701128100,0],[1701128400,0],[1701128700,0],[1701129000,0],[1701129300,0],[1701129600,0],[1701129900,0],[1701130200,0],[1701130500,0],[1701130800,0],[1701131100,0],[1701131400,0],[1701131700,0],[1701132000,0],[1701132300,0],[1701132600,0],[1701132900,0],[1701133200,0],[1701133500,0],[1701133800,0],[1701134100,0],[1701134400,0],[1701134700,0],[1701135000,0],[1701135300,2639],[1701135600,0],[1701135900,0],[1701136200,0],[1701136500,0],[1701136800,0],[1701137100,0],[1701137400,547159],[1701137700,694052],[1701138000,0],[1701138300,521498],[1701138600,3422],[1701138900,0],[1701139200,0],[1701139500,0],[1701139800,0],[1701140100,0],[1701140400,0],[1701140700,0],[1701141000,0],[1701141300,0],[1701141600,0],[1701141900,0],[1701142200,0]],\"backblaze_bytes\":[[1701127800,0],[1701128100,0],[1701128400,0],[1701128700,0],[1701129000,0],[1701129300,0],[1701129600,0],[1701129900,0],[1701130200,0],[1701130500,0],[1701130800,0],[1701131100,0],[1701131400,0],[1701131700,0],[1701132000,0],[1701132300,0],[1701132600,0],[1701132900,0],[1701133200,0],[1701133500,0],[1701133800,0],[1701134100,0],[1701134400,0],[1701134700,0],[1701135000,0],[1701135300,0],[1701135600,0],[1701135900,0],[1701136200,0],[1701136500,0],[1701136800,0],[1701137100,0],[1701137400,0],[1701137700,0],[1701138000,0],[1701138300,0],[1701138600,0],[1701138900,0],[1701139200,0],[1701139500,0],[1701139800,0],[1701140100,0],[1701140400,0],[1701140700,0],[1701141000,0],[1701141300,0],[1701141600,0],[1701141900,0],[1701142200,0]],\"sent_bytes\":[[1701127800,0],[1701128100,0],[1701128400,0],[1701128700,0],[1701129000,0],[1701129300,0],[1701129600,0],[1701129900,0],[1701130200,0],[1701130500,0],[1701130800,0],[1701131100,0],[1701131400,0],[1701131700,0],[1701132000,0],[1701132300,0],[1701132600,0],[1701132900,0],[1701133200,0],[1701133500,0],[1701133800,0],[1701134100,0],[1701134400,0],[1701134700,0],[1701135000,0],[1701135300,2639],[1701135600,0],[1701135900,0],[1701136200,0],[1701136500,0],[1701136800,0],[1701137100,0],[1701137400,547159],[1701137700,694052],[1701138000,0],[1701138300,521498],[1701138600,3422],[1701138900,0],[1701139200,0],[1701139500,0],[1701139800,0],[1701140100,0],[1701140400,0],[1701140700,0],[1701141000,0],[1701141300,0],[1701141600,0],[1701141900,0],[1701142200,0]]}}}}";

        String s = "{\"resource\":{\"294320\":{\"metrics\":{\"responses_2xx\":[[1701220200,0],[1701220500,0]],\"responses_3xx\":[[1701220200,0],[1701220500,0]],\"responses_4xx\":[[1701220200,0],[1701220500,0]],\"responses_5xx\":[[1701220200,0],[1701220500,0]]}}}}\n";

//        printJson(s);

        System.out.println(JSON.parseObject("", GcoreCdnStatSeriesResourceResponse.class));

    }

    public static void printJson(String jsonStr, String keyStr) {

        JSONObject json = JSON.parseObject(jsonStr);
        JSONObject resource = json.getJSONObject(keyStr);

        for (Map.Entry<String, Object> entry : resource.entrySet()) {
            JSONObject value = (JSONObject) entry.getValue();

            JSONObject metrics = value.getJSONObject("metrics");

            for (Map.Entry<String, Object> objectEntry : metrics.entrySet()) {
                String key = objectEntry.getKey();
                boolean b = key.equals("upstream_bytes")
                        || key.equals("shield_bytes")
                        || key.equals("total_bytes")
                        || key.equals("cdn_bytes")
                        || key.equals("backblaze_bytes")
                        || key.equals("sent_bytes");

                JSONArray array = (JSONArray) objectEntry.getValue();

                for (int i = array.size() - 1; i >= 0; i--) {

                    JSONArray objects = array.getJSONArray(i);

                    objects.set(0, DateUtil.formatDateTime(DateUtil.date(Long.parseLong(String.valueOf(objects.get(0))) * 1000)));

                    if (b) {
                        objects.set(2, formatFileSize(Long.parseLong(String.valueOf(objects.get(1)))));
                    }

                }

            }

        }

        System.out.println(JSON.toJSONString(json, SerializerFeature.WriteMapNullValue));

    }


    /**
     * 文件大小智能转换
     * 会将文件大小转换为最大满足单位
     */
    private static String formatFileSize(Long size) {
        final long kbl = 1024;
        final long mbl = kbl * 1024;
        final long gbl = mbl * 1024;
        String sizeName;
        if (size >= kbl && size < mbl) {
            sizeName = String.format("%.2f", size.doubleValue() / kbl) + "KB";
        } else if (size >= mbl && size < gbl) {
            sizeName = String.format("%.2f", size.doubleValue() / mbl) + "MB";
        } else if (size >= gbl) {
            sizeName = String.format("%.2f", size.doubleValue() / gbl) + "GB";
        } else {
            sizeName = size + "B";
        }
        return sizeName;
    }

}
